// Copyright Aeraki Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfiguration

import (
	v1alpha1 "github.com/aeraki-mesh/client-go/pkg/apis/dubbo/v1alpha1"
	metaprotocolv1alpha1 "github.com/aeraki-mesh/client-go/pkg/apis/metaprotocol/v1alpha1"
	redisv1alpha1 "github.com/aeraki-mesh/client-go/pkg/apis/redis/v1alpha1"
	dubbov1alpha1 "github.com/aeraki-mesh/client-go/pkg/applyconfiguration/dubbo/v1alpha1"
	metav1 "github.com/aeraki-mesh/client-go/pkg/applyconfiguration/meta/v1"
	applyconfigurationmetaprotocolv1alpha1 "github.com/aeraki-mesh/client-go/pkg/applyconfiguration/metaprotocol/v1alpha1"
	applyconfigurationredisv1alpha1 "github.com/aeraki-mesh/client-go/pkg/applyconfiguration/redis/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=dubbo.aeraki.io, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithKind("DubboAuthorizationPolicy"):
		return &dubbov1alpha1.DubboAuthorizationPolicyApplyConfiguration{}

		// Group=meta.k8s.io, Version=v1
	case v1.SchemeGroupVersion.WithKind("ManagedFieldsEntry"):
		return &metav1.ManagedFieldsEntryApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ObjectMeta"):
		return &metav1.ObjectMetaApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("OwnerReference"):
		return &metav1.OwnerReferenceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("TypeMeta"):
		return &metav1.TypeMetaApplyConfiguration{}

		// Group=metaprotocol.aeraki.io, Version=v1alpha1
	case metaprotocolv1alpha1.SchemeGroupVersion.WithKind("ApplicationProtocol"):
		return &applyconfigurationmetaprotocolv1alpha1.ApplicationProtocolApplyConfiguration{}
	case metaprotocolv1alpha1.SchemeGroupVersion.WithKind("MetaRouter"):
		return &applyconfigurationmetaprotocolv1alpha1.MetaRouterApplyConfiguration{}

		// Group=redis.aeraki.io, Version=v1alpha1
	case redisv1alpha1.SchemeGroupVersion.WithKind("RedisDestination"):
		return &applyconfigurationredisv1alpha1.RedisDestinationApplyConfiguration{}
	case redisv1alpha1.SchemeGroupVersion.WithKind("RedisService"):
		return &applyconfigurationredisv1alpha1.RedisServiceApplyConfiguration{}

	}
	return nil
}
